/* Copyright (c) 2019-2020, Sascha Willems
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform UBO {
    mat4 inverseView;
    mat4 inverseProj;
	vec4 light;
} ubo;

layout(location = 0) rayPayloadEXT vec3 hitValue;

vec3 traceRay(float tmin, float tmax, vec2 offset){
	vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + offset;
	vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;
	vec4 origin = ubo.inverseView * vec4(0,0,0,1);
	vec4 target = ubo.inverseProj * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = ubo.inverseView *vec4(normalize(target.xyz), 0) ;
    hitValue = vec3(0.0);
    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
	return hitValue;
}

void main() 
{	

	// Supersampling
	vec3 tempHitValue = vec3(0.0);
	tempHitValue += traceRay(0.001f, 10000.0f, vec2(0.25));
	tempHitValue += traceRay(0.001f, 10000.0f, vec2(0.25, 0.75));
	tempHitValue += traceRay(0.001f, 10000.0f, vec2(0.25, 0.75));
	tempHitValue += traceRay(0.001f, 10000.0f, vec2(0.75, 0.25));
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(tempHitValue / 4, 0.0));

	//Single sample per pixel
	// vec3 tempHitValue = traceRay(0.001f, 10000.0f, vec2(0.25));
	// imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(tempHitValue, 0.0));
}
