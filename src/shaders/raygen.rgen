#version 460
#extension GL_EXT_ray_tracing : enable

struct RayPayload {
	vec3 color;
	bool shadow;
	int recursion;
	float weight;
};

layout(location = 0) rayPayloadEXT RayPayload Payload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform UBO {
    mat4 inverseView;
    mat4 inverseProj;
} ubo;


vec3 traceRay(float tmin, float tmax, vec2 offset){
	vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + offset;
	vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;
	vec4 origin = ubo.inverseView * vec4(0,0,0,1);
	vec4 target = ubo.inverseProj * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = ubo.inverseView *vec4(normalize(target.xyz), 0);
	Payload.recursion = 0;
	Payload.color = vec3(0.0);
	Payload.weight = 1.0;

    traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
	return Payload.color;
}

void main() 
{	

	// Supersampling
	// vec3 tempHitValue = vec3(0.0);
	// tempHitValue += traceRay(0.001, 10000.0, vec2(0.25));
	// tempHitValue += traceRay(0.001, 10000.0, vec2(0.25, 0.75));
	// tempHitValue += traceRay(0.001, 10000.0, vec2(0.25, 0.75));
	// tempHitValue += traceRay(0.001, 10000.0, vec2(0.75, 0.25));
	// imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(tempHitValue / 4, 0.0));

	//Single sample per pixel
	vec3 tempHitValue = traceRay(0.01f, 10000.0f, vec2(0.5));
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(tempHitValue, 0.0));
}
