#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

struct Sphere
{
  vec4 pad[2];
  vec3 center;
  float radius;
  int matID;
};
struct Ray
{
  vec3 origin;
  vec3 direction;
};

layout(binding = 6, set = 0) buffer Spheres { Sphere s[]; } spheres[];

float hitSphere(const Sphere s, const Ray r)
{
  vec3  oc           = r.origin - s.center;
  float a            = dot(r.direction, r.direction);
  float b            = 2.0 * dot(oc, r.direction);
  float c            = dot(oc, oc) - s.radius * s.radius;
  float discriminant = b * b - 4 * a * c;
  if(discriminant < 0)
  {
    return -1.0;
  }else{
    float numerator = -b - sqrt(discriminant);
    if(numerator > 0.0) {
      return numerator / (2.0 * a);
    }
    numerator = -b + sqrt(discriminant);
    if(numerator > 0.0) {
      return numerator / (2.0 * a);
    }else {
      return -1;
    }
  }
}

void main()
{
    Ray ray;
    ray.origin    = gl_WorldRayOriginEXT;
    ray.direction = gl_WorldRayDirectionEXT;

    Sphere sphere = spheres[gl_InstanceCustomIndexEXT].s[gl_PrimitiveID];
    sphere.center = sphere.center + gl_ObjectToWorldEXT[3];
    sphere.radius = max(gl_ObjectToWorldEXT[0][0], max(gl_ObjectToWorldEXT[1][1], gl_ObjectToWorldEXT[2][2])) * sphere.radius;

    float tHit = -1;
    tHit = hitSphere(sphere, ray);
    if(tHit > 0)
        reportIntersectionEXT(tHit, 0);
}
